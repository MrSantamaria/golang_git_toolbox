package main

import (
    "bufio"
    "context"
    "flag"
    "fmt"
    "os"
    "strings"

    "github.com/google/go-github/v45/github"
    "golang.org/x/oauth2"
)

func main() {
    // Parse input arguments
    patToken := flag.String("token", "", "GitHub Personal Access Token")
    filePath := flag.String("file", "", "Path to the text file with repository URLs")
    prName := flag.String("pr", "", "Name of the PR to close")
    flag.Parse()

    // Validate input
    if *patToken == "" || *filePath == "" || *prName == "" {
        fmt.Println("Please provide a token, file path, and PR name")
        return
    }

    // Read repository URLs from the text file
    file, err := os.Open(*filePath)
    if err != nil {
        fmt.Println("Error opening file:", err)
        return
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)
    repos := []string{}
    for scanner.Scan() {
        repos = append(repos, scanner.Text())
    }

    // GitHub API authentication
    ctx := context.Background()
    ts := oauth2.StaticTokenSource(
        &oauth2.Token{AccessToken: *patToken},
    )
    tc := oauth2.NewClient(ctx, ts)
    client := github.NewClient(tc)

    // Process each repository
    for _, repoURL := range repos {
        parts := strings.Split(strings.TrimPrefix(repoURL, "https://github.com/"), "/")
        if len(parts) != 2 {
            fmt.Println("Invalid repository URL:", repoURL)
            continue
        }
        owner, repo := parts[0], parts[1]

        // Check for the specified PR and close it if exists
        prs, _, err := client.PullRequests.List(ctx, owner, repo, nil)
        if err != nil {
            fmt.Println("Error retrieving PRs:", err)
            continue
        }

        for _, pr := range prs {
            if *pr.Title == *prName {
                _, _, err := client.PullRequests.Edit(ctx, owner, repo, pr.GetNumber(), &github.PullRequest{State: github.String("closed")})
                if err != nil {
                    fmt.Println("Error closing PR:", err)
                    continue
                }
                fmt.Printf("Closed PR '%s' in repository %s\n", *prName, repoURL)
                break
            }
        }
    }
}
